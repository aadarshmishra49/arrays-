problem - find the dupliacte num 
link -- https://leetcode.com/problems/find-the-duplicate-number/


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++)
            ans=ans^nums[i];
        for(int i=1;i<nums.size();i++){
            ans = ans^i;
            
        }
    return ans;
    }
};
2nd approach -- using sorting 

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-1;i++)
        {   if(nums[i]==nums[i+1])
               return  nums[i];
        }
        return nums[n-1];
    }
};

3rd approach --
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
     
      int slow=nums[0];
        int fast=nums[0];
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
            
        }while(slow!=fast);
        fast=nums[0];
        while(slow!=fast){
            
            slow=nums[slow];
            fast=nums[fast];
        }
        
       return slow;
    }
};
